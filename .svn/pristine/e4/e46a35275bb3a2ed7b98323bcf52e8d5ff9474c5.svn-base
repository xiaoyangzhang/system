package com.yhyt.health.service.impl;

import com.yhyt.health.config.PathConfiguration;
import com.yhyt.health.dao.ServiceTaskLogMapper;
import com.yhyt.health.dao.SysServiceTaskMapper;
import com.yhyt.health.model.ServiceTaskLog;
import com.yhyt.health.model.SysServiceTask;
import com.yhyt.health.model.dto.CustomerServiceDTO;
import com.yhyt.health.model.dto.ServiceDetailDTO;
import com.yhyt.health.model.dto.TaskStatisticsDTO;
import com.yhyt.health.model.query.CustomerServiceQuery;
import com.yhyt.health.service.CustomerService;
import com.yhyt.health.util.BusinessException;
import com.yhyt.health.util.Page;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.Date;
import java.util.List;

@Service
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private ServiceTaskLogMapper serviceTaskLogMapper;
    @Autowired
    private SysServiceTaskMapper sysServiceTaskMapper;

//    @Resource(name = "loadBalanced")
//    private RestTemplate restTemplate;
    @Autowired
    private PathConfiguration pathConfiguration;
    @Override
    public Page<CustomerServiceDTO> selectServiceListPage(CustomerServiceQuery query) {
        Page<CustomerServiceDTO> page = new Page<CustomerServiceDTO>();
        if(query.getPageIndex()==null || query.getPageIndex()==0){
            query.setPageIndex(1);
        }
        page.setPageNo(query.getPageIndex());
        if(query.getPageSize() != null && query.getPageSize() != 0){
            page.setPageSize(query.getPageSize());
        }
        page.setResult(sysServiceTaskMapper.selectServiceListPage(query));
        return page;
    }

    @Override
    public ServiceDetailDTO selectById(Long id) {
        ServiceDetailDTO serviceDetailDTO = sysServiceTaskMapper.selectById(id);
        List<ServiceTaskLog> serviceTaskLogs = serviceTaskLogMapper.selectByTaskId(id);
        if (serviceDetailDTO!=null) {
            if (!CollectionUtils.isEmpty(serviceTaskLogs)){
                serviceDetailDTO.setTaskLogList(serviceTaskLogs);
            }

        }
        return serviceDetailDTO;
    }

    @Override
    @Transactional
    public int releaseTaskByOperator(String operator) {
        List<SysServiceTask> sysServiceTasks = sysServiceTaskMapper.selectByOperator(operator);
        Byte state=1;
        if (!CollectionUtils.isEmpty(sysServiceTasks)){
            for (SysServiceTask sst:sysServiceTasks){
                //已结束
                if (4==sst.getTaskState()) {
                    state=3;
                    sysServiceTaskMapper.releaseTaskByOperator(operator,state);
                }
                //跟进中
                else if(2==sst.getTaskState()){
                    state=1;
                    sysServiceTaskMapper.releaseTaskByOperator(operator,state);
                }

            }
        }
        return 0;
    }

    @Override
    @Transactional
    public int updateTaskState(Long id,Byte state,String content,String operator,String action) {
        SysServiceTask byPrimaryKey = sysServiceTaskMapper.selectByPrimaryKey(id);
        if (byPrimaryKey.getDoctorState()==2 && "submit".equals(action)){
            throw new BusinessException("501","医生处理中，不可重复提交！");
        }
        if ("end".equals(action) ){
            if (!(byPrimaryKey.getDoctorState()==3 || byPrimaryKey.getTaskState()==5)){
                throw new BusinessException("501","该任务状态不能结束任务");
            }
        }
        if ("track".equals(action)){
            if (StringUtils.isNotEmpty(byPrimaryKey.getOperator())){
                throw  new BusinessException("501","该任务已被他人跟进");
            }
        }
        SysServiceTask sysServiceTask = new SysServiceTask();
        sysServiceTask.setId(id);
        sysServiceTask.setUpdateTime(new Date());
        sysServiceTask.setTaskState(state);
        sysServiceTask.setDoctorState((byte)1);
        sysServiceTaskMapper.updateByPrimaryKeySelective(sysServiceTask);
        ServiceTaskLog serviceTaskLog = new ServiceTaskLog();
        serviceTaskLog.setContent(content);
        serviceTaskLog.setServiceTaskId(id);
        serviceTaskLog.setType(state);
        serviceTaskLog.setCreateTime(new Date());
        serviceTaskLog.setOperator(operator);
        serviceTaskLogMapper.insertSelective(serviceTaskLog);
        return 0;
    }

    @Override
    public TaskStatisticsDTO selectStatisticsCount(CustomerServiceQuery query) {
        return sysServiceTaskMapper.selectStatisticsCount(query);
    }
}
