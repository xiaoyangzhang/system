package com.yhyt.health.service.impl;

import com.yhyt.health.dao.*;
import com.yhyt.health.model.*;
import com.yhyt.health.model.dto.ItemBody;
import com.yhyt.health.model.dto.ItemBodyReturnVo;
import com.yhyt.health.model.dto.ItemQueryDTO;
import com.yhyt.health.model.dto.ItemResultDTO;
import com.yhyt.health.model.enumE.ItemStateEnum;
import com.yhyt.health.service.ItemService;
import com.yhyt.health.spring.AppResult;
import com.yhyt.health.util.Page;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 商品serviceImpl
 */
@Service
public class ItemServiceImpl implements ItemService {
    private static final Logger log = LoggerFactory.getLogger(ItemServiceImpl.class);
    @Resource
    private ItemMapper itemMapper;

    @Resource
    private ItemDepartmentMapper itemDepartmentMapper;

    @Resource
    private ItemDiseaseMapper itemDiseaseMapper;

    @Resource
    private ItemPictureMapper itemPictureMapper;

    @Resource
    private ItemLogMapper itemLogMapper;

    @Override
    public int deleteByPrimaryKey(Long id) {
        return itemMapper.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(Item record) {
        return itemMapper.insert(record);
    }

    @Override
    public int insertSelective(Item record) {
        return itemMapper.insertSelective(record);
    }

    @Override
    public Item selectByPrimaryKey(Long id) {
        return itemMapper.selectByPrimaryKey(id);
    }

    @Override
    public int updateByPrimaryKeySelective(Item record) {
        return itemMapper.updateByPrimaryKeySelective(record);
    }

    @Override
    public int updateByPrimaryKeyWithBLOBs(Item record) {
        return itemMapper.updateByPrimaryKeyWithBLOBs(record);
    }

    @Override
    public int updateByPrimaryKey(Item record) { return itemMapper.updateByPrimaryKey(record);
    }

    /**
     * 分页查询商品列表
     * @param itemQueryDTO
     * @return
     */

    @Override
    public Page<ItemResultDTO> getItemResultDTOPage(ItemQueryDTO itemQueryDTO) {

        Page<ItemResultDTO> page = new Page<ItemResultDTO>();
        if(itemQueryDTO.getPageIndex()==null || itemQueryDTO.getPageIndex()==0){
            itemQueryDTO.setPageIndex(1);
        }
        page.setPageNo(itemQueryDTO.getPageIndex());
        if(itemQueryDTO.getPageSize() != null && itemQueryDTO.getPageSize() != 0){
            page.setPageSize(itemQueryDTO.getPageSize());
        }
        List<ItemResultDTO> list = new ArrayList<>();
        list = this.itemMapper.getItemResultDTOPage(itemQueryDTO);

        if(null!=list){
            page.setResult(list);
        }else {
            page.setResult(Collections.emptyList());
            page.setTotalRecord(0);
        }
        return  page;
    }

    @Override
    public List<ItemResultDTO> getItemDTOsBelongDept(Long deptId) {
        return itemDepartmentMapper.selectItemsBelongDepts(deptId);
    }


    /**
     * 生成商品id＋code
     *  废弃方法
     * @return
     */
    @Override
    public String createItemCode() {

        //商品类型是服务包的
        String codePrefi = "01";

        return codePrefi;
    }

    /**
     * 保存／修改商品信息
     * @param itemBody
     * @return
     */
    @Override
    @Transactional
    public AppResult insertOrUpdateItemAndDisease(ItemBody itemBody) {
        AppResult appResult = new AppResult();
            try {
                long startTime = System.currentTimeMillis();    //获取开始时间
                //第一步 参数的非空判断直接在对象内部进行判断
                //第二步 判断id是否为空 为空就新增  不为空就修改
                if (null == itemBody.getId()) {
                    //进入新增流程
                    //保存商品信息

                    //先保存，没有code，保存以后，根据id 去生成code 然后再去更新code
                    itemBody.setCreateTime(DateTime.now().toDate());
                    itemBody.setVersion(1L);//保存的第一版 version为1  修改情况下 version＋1
                    this.itemMapper.insertitemBody(itemBody);
                    String temp = "0000000"+itemBody.getId();
                    String code = temp.length()>8?temp.substring(temp.length()-8,temp.length()):temp;
                    itemBody.setId(itemBody.getId());
                    itemBody.setCode(code);
                    itemBody.setOldVersion(itemBody.getVersion());
                    itemBody.setVersion(itemBody.getVersion()+1);
                    itemBody.setUpdateTime(DateTime.now().toDate());
                    this.itemMapper.updateitemBodyByPrimaryKeySelective(itemBody);

                    //保存商品关联医院科室表
                    ItemDepartment itemDepartment = new ItemDepartment();
                    itemDepartment.setItemId(itemBody.getId());
                    itemDepartment.setHospitalId(itemBody.getHospitalId());
                    itemDepartment.setDepartmentId(itemBody.getDepartmentId());
                    itemDepartment.setCreateTime(DateTime.now().toDate());
                    itemDepartmentMapper.insertSelective(itemDepartment);

                    //保存商品关联疾病表
                    List<Long> itemDiseases = new ArrayList<>();
                    itemDiseases = itemBody.getDictDiseaseIds();
                    for (Long vo : itemDiseases) {
                        ItemDisease itemDisease = new ItemDisease();

                        itemDisease.setDictDiseaseId(vo);
                        itemDisease.setItemId(itemBody.getId());
                        itemDisease.setCtreateTime(DateTime.now().toDate());
                        itemDiseaseMapper.insertSelective(itemDisease);
                    }

                    //保存商品详情图片表
                    List<String> contentDetailsPictures = itemBody.getContentDetailsPicture();
                    // 1-23123_2-_
                    //先删除
                    itemPictureMapper.deleteByAppointField("item_id",itemBody.getId());

                    byte tmp=0;
                    for(String pic : contentDetailsPictures){
                            ItemPicture itemPicture = new ItemPicture();
                            itemPicture.setItemId(itemBody.getId());
                            itemPicture.setSortNumber(tmp++);
                            itemPicture.setUrl(pic);
                            itemPicture.setCreateTime(DateTime.now().toDate());
                            itemPictureMapper.insertSelective(itemPicture);
                    }
                    long endTime = System.currentTimeMillis();    //获取结束时间

                    ItemLog itemLog = new ItemLog();
                    itemLog.setItemId(itemBody.getId());
                    itemLog.setOperator(itemBody.getCreateOperator());
                    itemLog.setCreateTime(DateTime.now().toDate());
                    StringBuffer stringBuffer = new StringBuffer();
                    stringBuffer.append("id为");
                    stringBuffer.append(itemBody.getId()+"的");
                    stringBuffer.append(itemBody.getName()+"商品创建成功，执行时间为");
                    stringBuffer.append((endTime - startTime)+"ms");
                    stringBuffer.append("执行本次操作的操作者是："+itemBody.getCreateOperator());
                    itemLog.setContent(stringBuffer.toString());
                    itemLogMapper.insertSelective(itemLog);

                    log.info("执行商品的创建操作成功,执行时间为{} ms",(endTime - startTime));

                } else {
                    //进入修改流程
                    //更新商品信息
                    itemBody.setUpdateTime(DateTime.now().toDate());
                    //更新的时候version需要＋1
                    Long version = this.itemMapper.selectByPrimaryKey(itemBody.getId()).getVersion();
                    itemBody.setVersion(version+1);
                    itemBody.setOldVersion(version);
                    this.itemMapper.updateitemBodyByPrimaryKeySelective(itemBody);

                    //更新商品关联医院科室表
                    ItemDepartment itemDepartment = this.itemDepartmentMapper.selectByAppointField("item_id", itemBody.getId());
                    itemDepartment.setHospitalId(itemBody.getHospitalId());
                    itemDepartment.setDepartmentId(itemBody.getDepartmentId());
                    itemDepartmentMapper.updateByPrimaryKeySelective(itemDepartment);

                    //商品关联疾病表

                    itemDiseaseMapper.deleteByAppointField("item_id", itemBody.getId());

                    List<Long> itemDiseases = new ArrayList<>();
                    itemDiseases = itemBody.getDictDiseaseIds();
                    for (Long vo : itemDiseases) {
                        ItemDisease itemDisease = new ItemDisease();

                        itemDisease.setDictDiseaseId(vo);
                        itemDisease.setItemId(itemBody.getId());
                        itemDisease.setCtreateTime(DateTime.now().toDate());
                        itemDiseaseMapper.insertSelective(itemDisease);
                    }

                    //保存商品详情图片表
                    List<String> contentDetailsPictures = itemBody.getContentDetailsPicture();
                    // 1_23123  2-_
                    //先删除
                    itemPictureMapper.deleteByAppointField("item_id",itemBody.getId());

                    byte tmp=0;
                    for(String pic : contentDetailsPictures){
                        ItemPicture itemPicture = new ItemPicture();
                        itemPicture.setItemId(itemBody.getId());
                        itemPicture.setSortNumber(tmp++);
                        itemPicture.setUrl(pic);
                        itemPicture.setCreateTime(DateTime.now().toDate());
                        itemPictureMapper.insertSelective(itemPicture);
                    }
                    long endTime = System.currentTimeMillis();    //获取结束时间
                    ItemLog itemLog = new ItemLog();
                    itemLog.setItemId(itemBody.getId());
                    itemLog.setOperator(itemBody.getCreateOperator());
                    itemLog.setCreateTime(DateTime.now().toDate());
                    StringBuffer stringBuffer = new StringBuffer();
                    stringBuffer.append("id为");
                    stringBuffer.append(itemBody.getId()+"的");
                    stringBuffer.append(itemBody.getName()+"商品更新操作成功，执行时间为");
                    stringBuffer.append((endTime - startTime)+"ms");
                    stringBuffer.append("执行本次操作的操作者是："+itemBody.getCreateOperator());
                    itemLog.setContent(stringBuffer.toString());
                    itemLogMapper.insertSelective(itemLog);

                    log.info("执行商品的更新操作成功,执行时间为{} ms",(endTime - startTime));
                }
                appResult.setCode("200");
                appResult.setMessage("成功");
            } catch (Exception e) {
                e.printStackTrace();
                appResult.setCode("400");
                appResult.setMessage("失败");
            }
        return appResult;
    }

    /**
     * 商品的详细信息查询接口
     * @return
     */
    @Override
    public ItemBodyReturnVo getItemMessage(final Long itemId) {

        ItemBodyReturnVo itemBodyReturnVo = itemMapper.getItemMessage(itemId);
        //获取疾病列表
        itemBodyReturnVo.setDictDiseaseIds(itemDiseaseMapper.getdDiseaseIdByItemId(itemId));
        //获取图片列表
        itemBodyReturnVo.setContentDetailsPicture(itemPictureMapper.getPictureUrls(itemId));

        return itemBodyReturnVo;
    }

    @Override
    public AppResult offshelfItem(Long itemId, Byte state) {
        AppResult appResult = new AppResult();
        try {
            itemMapper.offshelfItem(itemId, state);
            appResult.setCode("200");
            appResult.setMessage("成功");
        }catch (Exception e){
            e.printStackTrace();
            appResult.setCode("400");
            appResult.setMessage("失败");
        }
        return  appResult;
    }

    @Override
    @Transactional
    public int updateItemState(Item item) {
        if (item!=null){
            //TODO 校验
            itemMapper.updateByPrimaryKeySelective(item);
        }

        return 0;
    }

    /**
     * 获取最新的商品信息
     * @return
     */
    @Override
    public Item getNewestItem() {
        return itemMapper.getNewestItem();
    }

    @Override
    public Item selectByOrderId(Long orderId) {
        return itemMapper.selectByOrderId(orderId);
    }

    /**
     * 商品上下架状态变更
     */
    @Override
    @Transactional
    public void itemStateChange() {
        try {
            long startTime = System.currentTimeMillis();    //获取开始时间
            //商品上下架状态变更
            //需要上架的商品列表
            List<Item> itemNeedShelves = itemMapper.getItemNeedShelves(
                    (byte) ItemStateEnum.PENDING.getId(), DateTime.now().toDate());

            for (Item vo : itemNeedShelves) {
                Long version = null;
                version = vo.getVersion();
                vo.setState((byte) ItemStateEnum.SHELVES.getId()); //设置状态  上架
                vo.setVersion(version + 1);
                this.itemMapper.updateByPrimaryKeySelective(vo);
            }
            long endShelvesTime = System.currentTimeMillis();    //获取结束时间
            boolean flag = null != itemNeedShelves && itemNeedShelves.size() > 0 ? true : false;
            ItemLog itemLog = new ItemLog();
            itemLog.setItemId(flag ? itemNeedShelves.get(0).getId() : 0);
            itemLog.setOperator("系统自动触发");
            itemLog.setCreateTime(DateTime.now().toDate());
            StringBuffer stringBuffer = new StringBuffer();
            if (flag) {
                stringBuffer.append("id为");
                stringBuffer.append(itemNeedShelves.get(0).getId() + "等");
                stringBuffer.append(itemNeedShelves.size() + "个商品完成了自动上架，执行时间为");
                stringBuffer.append((endShelvesTime - startTime) + "ms");
                stringBuffer.append("操作者是：系统自动触发");
            } else {
                stringBuffer.append("本次没有需要自动上架的商品");
            }
            itemLog.setContent(stringBuffer.toString());
            itemLogMapper.insertSelective(itemLog);

            log.info("每天凌晨自动执行商品上架功能执行成功,本次上架了{}个商品，总共执行时常为{} ms",flag?itemNeedShelves.size():0,(endShelvesTime - startTime));
            //需要下架的商品列表
            List<Item> itemOffshelfs = itemMapper.getItemNeedShelves(
                    (byte) ItemStateEnum.OFFSHELF.getId(), DateTime.now().toDate());
            for (Item vo : itemOffshelfs) {
                Long version = null;
                version = vo.getVersion();
                vo.setState((byte) ItemStateEnum.OFFSHELF.getId()); //设置状态  上架
                vo.setVersion(version + 1);
                this.itemMapper.updateByPrimaryKeySelective(vo);
            }

            long endOffshelfsTime = System.currentTimeMillis();    //获取结束时间
            boolean flagOff = null != itemOffshelfs && itemOffshelfs.size() > 0 ? true : false;
            ItemLog itemLogOff = new ItemLog();
            itemLogOff.setItemId(flagOff ? itemOffshelfs.get(0).getId() : 0);
            itemLogOff.setOperator("系统自动触发");
            itemLogOff.setCreateTime(DateTime.now().toDate());
            StringBuffer stringBufferOff = new StringBuffer();
            if (flagOff) {
                stringBufferOff.append("id为");
                stringBufferOff.append(itemNeedShelves.get(0).getId() + "等");
                stringBufferOff.append(itemNeedShelves.size() + "个商品完成了自动下架，执行时间为");
                stringBufferOff.append((endOffshelfsTime - startTime) + "ms");
                stringBufferOff.append("操作者是：系统自动触发");
            } else {
                stringBuffer.append("本次没有需要自动下架的商品");
            }
            itemLogOff.setContent(stringBuffer.toString());
            itemLogMapper.insertSelective(itemLogOff);

            log.info("每天凌晨自动执行商品下架功能执行成功,本次下架了{}个商品，总共执行时常为{} ms",flagOff?itemOffshelfs.size():0,(endOffshelfsTime - startTime));
        }catch (Exception e){
            log.info("每天凌晨自动执行商品上／下架功能执行失败,{},{}",e.getMessage(),e);
        }
    }

}
